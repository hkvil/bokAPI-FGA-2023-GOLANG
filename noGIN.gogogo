package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	_ "strconv"
)

type Employee struct{
	ID			int
	Name		string	
	Age			int	
	Division	string
}

var employees = []Employee{
	{ID:1,Name:"Dayat",Age:23,Division:"IT"},
	{ID:2,Name:"Dada",Age:33,Division:"ITI"},
}
 

var PORT = ":8080"


func main(){
	// fmt.Print(employees)
	http.HandleFunc("/",greet)
	http.HandleFunc("/employees",getEmployees)
	http.HandleFunc("/employee",createEmployee)

	fmt.Print("Application is listening on port ",PORT)
	http.ListenAndServe(PORT,nil)
}

func greet(w http.ResponseWriter,r *http.Request){
	msg:="Hello World!"
	fmt.Fprint(w,msg)
}

func getEmployees(w http.ResponseWriter,r *http.Request){
	w.Header().Set("Content-Type","application/json")

	if r.Method=="GET"{
		json.NewEncoder(w).Encode(employees)
		return
	}
	http.Error(w,"Invalid method",http.StatusBadRequest)
}

func createEmployee(w http.ResponseWriter,r *http.Request){
	w.Header().Set("Content-Type","application/json")

	if r.Method=="POST"{
		name	:=r.FormValue("name")
		age		:=r.FormValue("age")
		division:=r.FormValue("division")

		convertedAge,err := strconv.Atoi(age)

		if err!=nil{
			http.Error(w,"Invalid Age",http.StatusBadRequest)
			// return
		}

		newEmployee := Employee{
			ID: 		len(employees)+1,
			Name: 		name,
			Age: 		convertedAge,
			Division: 	division,
		}

		employees = append(employees, newEmployee)

		json.NewEncoder(w).Encode(newEmployee)
	}
	http.Error(w,"Invalid method",http.StatusForbidden)
}